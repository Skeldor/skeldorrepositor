# Импортируем модуль sqlite3 для работы с базой данных
import sqlite3

# Создаем подключение к базе данных inventory.db
conn = sqlite3.connect("inventory.db")

# Создаем курсор для выполнения SQL-запросов
cursor = conn.cursor()

# Создаем таблицу products, если она еще не существует
cursor.execute("""CREATE TABLE IF NOT EXISTS products (
    id INTEGER PRIMARY KEY,
    name TEXT NOT NULL,
    description TEXT,
    price REAL NOT NULL,
    quantity INTEGER NOT NULL,
    category TEXT
)""")

# Функция для добавления товара в инвентарь
def add_product():
    # Запрашиваем информацию о товаре у пользователя
    name = input("Введите название товара: ")
    description = input("Введите описание товара: ")
    price = float(input("Введите цену товара: "))
    quantity = int(input("Введите количество товара на складе: "))
    category = input("Введите категорию товара: ")

    # Добавляем товар в таблицу products
    cursor.execute("""INSERT INTO products (name, description, price, quantity, category)
    VALUES (?, ?, ?, ?, ?)""", (name, description, price, quantity, category))

    # Сохраняем изменения в базе данных
    conn.commit()

    # Выводим сообщение об успешном добавлении товара
    print(f"Товар {name} успешно добавлен в инвентарь.")

# Функция для удаления товара из инвентаря
def delete_product():
    # Запрашиваем у пользователя, как он хочет выбрать товар для удаления
    choice = input("Вы хотите выбрать товар по названию или по идентификатору? (н/и): ")

    # Если пользователь выбрал название
    if choice == "н":
        # Запрашиваем название товара
        name = input("Введите название товара: ")

        # Удаляем товар из таблицы products по названию
        cursor.execute("""DELETE FROM products WHERE name = ?""", (name,))

        # Сохраняем изменения в базе данных
        conn.commit()

        # Выводим сообщение об успешном удалении товара
        print(f"Товар {name} успешно удален из инвентаря.")

    # Если пользователь выбрал идентификатор
    elif choice == "и":
        # Запрашиваем идентификатор товара
        id = int(input("Введите идентификатор товара: "))

        # Удаляем товар из таблицы products по идентификатору
        cursor.execute("""DELETE FROM products WHERE id = ?""", (id,))

        # Сохраняем изменения в базе данных
        conn.commit()

        # Выводим сообщение об успешном удалении товара
        print(f"Товар с идентификатором {id} успешно удален из инвентаря.")

    # Если пользователь ввел неверный выбор
    else:
        # Выводим сообщение об ошибке
        print("Неверный выбор. Попробуйте еще раз.")

# Функция для редактирования информации о товаре
def edit_product():
    # Запрашиваем у пользователя, как он хочет выбрать товар для редактирования
    choice = input("Вы хотите выбрать товар по названию или по идентификатору? (н/и): ")

    # Если пользователь выбрал название
    if choice == "н":
        # Запрашиваем идентификатор товара
        product_name = str(input("Введите название товара: "))

            # Получаем информацию о товаре из таблицы products по идентификатору
        cursor.execute("""SELECT * FROM products WHERE name = ?""", (product_name,))
        product = cursor.fetchone()

        # Если товар с таким идентификатором существует
        if product:
            # Выводим информацию о товаре
            print(f"Информация о товаре с названием {product_name}:")
            print(f"Название: {product[1]}")
            print(f"Описание: {product[2]}")
            print(f"Цена: {product[3]}")
            print(f"Количество на складе: {product[4]}")
            print(f"Категория: {product[5]}")

            # Запрашиваем у пользователя, какую информацию он хочет изменить
            field = input("Какую информацию вы хотите изменить? (н/о/ц/к/т): ")

            # Если пользователь выбрал название
            if field == "н":
                # Запрашиваем новое название товара
                new_name = input("Введите новое название товара: ")

                # Обновляем название товара в таблице products
                cursor.execute("""UPDATE products SET name = ? WHERE name = ?""", (new_name, product_name))

                # Сохраняем изменения в базе данных
                conn.commit()

                # Выводим сообщение об успешном изменении названия товара
                print(f"Название товара с название {product_name} успешно изменено на {new_name}.")

            # Если пользователь выбрал описание
            elif field == "о":
                # Запрашиваем новое описание товара
                new_description = input("Введите новое описание товара: ")

                # Обновляем описание товара в таблице products
                cursor.execute("""UPDATE products SET description = ? WHERE name = ?""", (new_description, product_name))

                # Сохраняем изменения в базе данных
                conn.commit()

                # Выводим сообщение об успешном изменении описания товара
                print(f"Описание товара с названием {product_name} успешно изменено.")

            # Если пользователь выбрал цену
            elif field == "ц":
                # Запрашиваем новую цену товара
                new_price = float(input("Введите новую цену товара: "))

                # Обновляем цену товара в таблице products
                cursor.execute("""UPDATE products SET price = ? WHERE name = ?""", (new_price, product_name))

                # Сохраняем изменения в базе данных
                conn.commit()

                # Выводим сообщение об успешном изменении цены товара
                print(f"Цена товара с названием {product_name} успешно изменена на {new_price}.")

            # Если пользователь выбрал количество на складе
            elif field == "к":
                # Запрашиваем новое количество товара на складе
                new_quantity = int(input("Введите новое количество товара на складе: "))

                # Обновляем количество товара на складе в таблице products
                cursor.execute("""UPDATE products SET quantity = ? WHERE name = ?""", (new_quantity, product_name))

                # Сохраняем изменения в базе данных
                conn.commit()

                # Выводим сообщение об успешном изменении количества товара на складе
                print(f"Количество товара с названием {product_name} на складе успешно изменено на {new_quantity}.")

            # Если пользователь выбрал категорию
            elif field == "т":
                # Запрашиваем новую категорию товара
                new_category = input("Введите новую категорию товара: ")

                # Обновляем категорию товара в таблице products
                cursor.execute("""UPDATE products SET category = ? WHERE name = ?""", (new_category, product_name))

                # Сохраняем изменения в базе данных
                conn.commit()

                # Выводим сообщение об успешном изменении категории товара
                print(f"Категория товара с названием {product_name} успешно изменена на {new_category}.")

            # Если пользователь ввел неверный выбор
            else:
                # Выводим сообщение об ошибке
                print("Неверный выбор. Попробуйте еще раз.")

        # Если товар с таким идентификатором не существует
        else:
            # Выводим сообщение об ошибке
            print(f"Товар с названием {product_name} не найден в инвентаре.")

    # Если пользователь выбрал название
    if choice == "и":
        # Запрашиваем идентификатор товара
        product_id = int(input("Введите идентификатор товара: "))

            # Получаем информацию о товаре из таблицы products по идентификатору
        cursor.execute("""SELECT * FROM products WHERE id = ?""", (product_id,))
        product = cursor.fetchone()

        # Если товар с таким идентификатором существует
        if product:
            # Выводим информацию о товаре
            print(f"Информация о товаре с идентификатором {product_id}:")
            print(f"Название: {product[1]}")
            print(f"Описание: {product[2]}")
            print(f"Цена: {product[3]}")
            print(f"Количество на складе: {product[4]}")
            print(f"Категория: {product[5]}")

            # Запрашиваем у пользователя, какую информацию он хочет изменить
            field = input("Какую информацию вы хотите изменить? (н/о/ц/к/т): ")

            # Если пользователь выбрал название
            if field == "н":
                # Запрашиваем новое название товара
                new_name = input("Введите новое название товара: ")

                # Обновляем название товара в таблице products
                cursor.execute("""UPDATE products SET name = ? WHERE id = ?""", (new_name, product_id))

                # Сохраняем изменения в базе данных
                conn.commit()

                # Выводим сообщение об успешном изменении названия товара
                print(f"Название товара с идентификатором {product_id} успешно изменено на {new_name}.")

            # Если пользователь выбрал описание
            elif field == "о":
                # Запрашиваем новое описание товара
                new_description = input("Введите новое описание товара: ")

                # Обновляем описание товара в таблице products
                cursor.execute("""UPDATE products SET description = ? WHERE id = ?""", (new_description, product_id))

                # Сохраняем изменения в базе данных
                conn.commit()

                # Выводим сообщение об успешном изменении описания товара
                print(f"Описание товара с идентификатором {product_id} успешно изменено.")

            # Если пользователь выбрал цену
            elif field == "ц":
                # Запрашиваем новую цену товара
                new_price = float(input("Введите новую цену товара: "))

                # Обновляем цену товара в таблице products
                cursor.execute("""UPDATE products SET price = ? WHERE id = ?""", (new_price, product_id))

                # Сохраняем изменения в базе данных
                conn.commit()

                # Выводим сообщение об успешном изменении цены товара
                print(f"Цена товара с идентификатором {product_id} успешно изменена на {new_price}.")

            # Если пользователь выбрал количество на складе
            elif field == "к":
                # Запрашиваем новое количество товара на складе
                new_quantity = int(input("Введите новое количество товара на складе: "))

                # Обновляем количество товара на складе в таблице products
                cursor.execute("""UPDATE products SET quantity = ? WHERE id = ?""", (new_quantity, product_id))

                # Сохраняем изменения в базе данных
                conn.commit()

                # Выводим сообщение об успешном изменении количества товара на складе
                print(f"Количество товара с идентификатором {product_id} на складе успешно изменено на {new_quantity}.")

            # Если пользователь выбрал категорию
            elif field == "т":
                # Запрашиваем новую категорию товара
                new_category = input("Введите новую категорию товара: ")

                # Обновляем категорию товара в таблице products
                cursor.execute("""UPDATE products SET category = ? WHERE id = ?""", (new_category, product_id))

                # Сохраняем изменения в базе данных
                conn.commit()

                # Выводим сообщение об успешном изменении категории товара
                print(f"Категория товара с идентификатором {product_id} успешно изменена на {new_category}.")

            # Если пользователь ввел неверный выбор
            else:
                # Выводим сообщение об ошибке
                print("Неверный выбор. Попробуйте еще раз.")

        # Если товар с таким идентификатором не существует
        else:
            # Выводим сообщение об ошибке
            print(f"Товар с идентификатором {product_id} не найден в инвентаре.")

    # Если пользователь ввел неверный выбор
    else:
        # Выводим сообщение об ошибке
        print("Неверный выбор. Попробуйте еще раз.")

# Функция для вывода информации о всех товарах в инвентаре
def show_products():
    # Получаем все товары из таблицы products
    cursor.execute("""SELECT * FROM products""")
    products = cursor.fetchall()

    # Если таблица products не пуста
    if products:
        # Выводим заголовок таблицы
        print("Инвентарь товаров:")
        print("ID | Название | Описание | Цена | Количество | Категория")

        # Выводим информацию о каждом товаре в таблице
        for product in products:
            print(f"{product[0]} | {product[1]} | {product[2]} | {product[3]} | {product[4]} | {product[5]}")

    # Если таблица products пуста
    else:
        # Выводим сообщение об отсутствии товаров в инвентаре
        print("В инвентаре нет товаров.")

# Функция для поиска товара по названию или категории
def search_product():
    # Запрашиваем у пользователя, как он хочет искать товар
    choice = input("Вы хотите искать товар по названию или по категории? (н/к): ")

    # Если пользователь выбрал название
    if choice == "н":
        # Запрашиваем название товара
        name = input("Введите название товара: ")

        # Получаем информацию о товаре из таблицы products по названию
        cursor.execute("""SELECT * FROM products WHERE name = ?""", (name,))
        product = cursor.fetchone()

        # Если товар с таким названием существует
        if product:
            # Выводим информацию о товаре
            print(f"Информация о товаре {name}:")
            print(f"Идентификатор: {product[0]}")
            print(f"Название: {product[1]}")
            print(f"Описание: {product[2]}")
            print(f"Цена: {product[3]}")
            print(f"Количество на складе: {product[4]}")
            print(f"Категория: {product[5]}")

        # Если товар с таким названием не существует
        else:
            # Выводим сообщение об ошибке
            print(f"Товар с названием {name} не найден в инвентаре.")

    # Если пользователь выбрал категорию
    elif choice == "к":
        # Запрашиваем категорию товара
        category = input("Введите категорию товара: ")

        # Получаем все товары из таблицы products по категории
        cursor.execute("""SELECT * FROM products WHERE category = ?""", (category,))
        products = cursor.fetchall()

        # Если товары с такой категорией существуют
        if products:
            # Выводим заголовок таблицы
            print(f"Товары в категории {category}:")
            print("ID | Название | Описание | Цена | Количество | Категория")

            # Выводим информацию о каждом товаре в таблице
            for product in products:
                print(f"{product[0]} | {product[1]} | {product[2]} | {product[3]} | {product[4]} | {product[5]}")

        # Если товары с такой категорией не существуют
        else:
            # Выводим сообщение об ошибке
            print(f"Товары в категории {category} не найдены в инвентаре.")

    # Если пользователь ввел неверный выбор
    else:
        # Выводим сообщение об ошибке
        print("Неверный выбор. Попробуйте еще раз.")

# Функция для вывода меню программы
def show_menu():
    # Выводим приветствие и список доступных действий
    print("Добро пожаловать в программу управления инвентарем товаров в онлайн-магазине.")
    print("Выберите действие из списка:")
    print("1 - Добавить товар в инвентарь")
    print("2 - Удалить товар из инвентаря")
    print("3 - Редактировать информацию о товаре")
    print("4 - Показать все товары в инвентаре")
    print("5 - Поиск товара по названию или категории")
    print("6 - Выход из программы")

# Функция для запуска программы
def run_program():
    # Выводим меню программы
    show_menu()

    # Запрашиваем у пользователя выбор действия
    choice = input("Введите номер действия: ")

    # Если пользователь выбрал добавить товар в инвентарь
    if choice == "1":
        # Вызываем функцию для добавления товара в инвентарь
        add_product()

        # Запускаем программу заново
        run_program()

    # Если пользователь выбрал удалить товар из инвентаря
    elif choice == "2":
        # Вызываем функцию для удаления товара из инвентаря
        delete_product()

        # Запускаем программу заново
        run_program()

    # Если пользователь выбрал редактировать информацию о товаре
    elif choice == "3":
        # Вызываем функцию для редактирования информации о товаре
        edit_product()

        # Запускаем программу заново
        run_program()

    # Если пользователь выбрал показать все товары в инвентаре
    elif choice == "4":
        # Вызываем функцию для вывода информации о всех товарах в инвентаре
        show_products()

        # Запускаем программу заново
        run_program()

    # Если пользователь выбрал поиск товара по названию или категории
    elif choice == "5":
        # Вызываем функцию для поиска товара по названию или категории
        search_product()

        # Запускаем программу заново
        run_program()

    # Если пользователь выбрал выход из программы
    elif choice == "6":
        # Закрываем подключение к базе данных
        conn.close()

        # Выводим сообщение о завершении работы программы
        print("Программа завершена. До свидания!")

    # Если пользователь ввел неверный выбор
    else:
        # Выводим сообщение об ошибке
        print("Неверный выбор. Попробуйте еще раз.")

        # Запускаем программу заново
        run_program()

# Запускаем программу
run_program()

